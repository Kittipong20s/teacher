// src/features/leave-requests/LeaveRequestsPage.jsx
import React, { useEffect, useMemo, useState } from 'react';
import Page from '../../components/ui/Page.jsx';
import Card from '../../components/ui/Card.jsx';
import CommonModal from '../../components/CommonModal.jsx';
import { Input, Label, Button } from '../../components/ui/Controls.jsx';
import Pagination from '../../components/Pagination.jsx';

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô
import {
  listLeaveRequests,       // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏•‡∏≤
  approveLeaveRequest,     // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  rejectLeaveRequest       // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
} from '../../mocks/teacherApi';

const PER_PAGE = 10;

function thai(ymd) {
  if (!ymd) return '‚Äî';
  const d = new Date(ymd + 'T00:00:00');
  const months = ['‡∏°.‡∏Ñ.','‡∏Å.‡∏û.','‡∏°‡∏µ.‡∏Ñ.','‡πÄ‡∏°.‡∏¢.','‡∏û.‡∏Ñ.','‡∏°‡∏¥.‡∏¢.','‡∏Å.‡∏Ñ.','‡∏™.‡∏Ñ.','‡∏Å.‡∏¢.','‡∏ï.‡∏Ñ.','‡∏û.‡∏¢.','‡∏ò.‡∏Ñ.'];
  return `${d.getDate()} ${months[d.getMonth()]} ${d.getFullYear() + 543}`;
}

export default function LeaveRequestsPage() {
  const [loading, setLoading] = useState(true);
  const [rows, setRows] = useState([]);
  const [page, setPage] = useState(1);

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
  const [status, setStatus] = useState('ALL');   // ALL | pending | approved | rejected
  const [type, setType] = useState('ALL');       // ALL | ‡∏õ‡πà‡∏ß‡∏¢ | ‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß | ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  const [fromDate, setFromDate] = useState('');
  const [q, setQ] = useState('');

  // ‡πÇ‡∏°‡∏î‡∏±‡∏•
  const [view, setView] = useState(null);        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î + ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  const [decisionNote, setDecisionNote] = useState('');

  useEffect(() => {
    (async () => {
      setLoading(true);
      try {
        const res = await listLeaveRequests({
          status: status === 'ALL' ? undefined : status,
          type: type === 'ALL' ? undefined : type,
          from: fromDate || undefined,
          q
        });
        setRows(res || []);
        setPage(1);
      } finally {
        setLoading(false);
      }
    })();
  }, [status, type, fromDate, q]);

  const displayRows = useMemo(() => {
    const collator = new Intl.Collator('th');
    return [...rows].sort((a, b) => new Date(b.request_date) - new Date(a.request_date))
      .sort((a, b) => collator.compare(a.student_name || '', b.student_name || ''));
  }, [rows]);

  const visRows = useMemo(() => {
    const start = (page - 1) * PER_PAGE;
    return displayRows.slice(start, start + PER_PAGE);
  }, [displayRows, page]);

  async function doApprove() {
    if (!view) return;
    await approveLeaveRequest(view.id, { note: decisionNote });
    setView(null);
    setDecisionNote('');
    // refresh
    const res = await listLeaveRequests({
      status: status === 'ALL' ? undefined : status,
      type: type === 'ALL' ? undefined : type,
      from: fromDate || undefined,
      q
    });
    setRows(res || []);
  }
  async function doReject() {
    if (!view) return;
    await rejectLeaveRequest(view.id, { note: decisionNote });
    setView(null);
    setDecisionNote('');
    const res = await listLeaveRequests({
      status: status === 'ALL' ? undefined : status,
      type: type === 'ALL' ? undefined : type,
      from: fromDate || undefined,
      q
    });
    setRows(res || []);
  }

  return (
    <Page title="‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏•‡∏≤">
      {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
      <Card>
        <div className="form-grid">
          <div className="field">
            <Label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Label>
            <select className="input" value={status} onChange={e => setStatus(e.target.value)}>
              <option value="ALL">‚Äî ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Äî</option>
              <option value="pending">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
              <option value="approved">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
              <option value="rejected">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
            </select>
          </div>

          <div className="field">
            <Label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Label>
            <select className="input" value={type} onChange={e => setType(e.target.value)}>
              <option value="ALL">‚Äî ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Äî</option>
              <option value="‡∏õ‡πà‡∏ß‡∏¢">‡∏õ‡πà‡∏ß‡∏¢</option>
              <option value="‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß">‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</option>
              <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
            </select>
          </div>

          <div className="field">
            <Label>‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
            <Input type="date" value={fromDate} onChange={e => setFromDate(e.target.value)} />
          </div>

          <div className="field" style={{ gridColumn: '1 / -1' }}>
            <Label>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏™‡∏Å‡∏∏‡∏•/‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•)</Label>
            <Input value={q} onChange={e => setQ(e.target.value)} placeholder="‡πÄ‡∏ä‡πà‡∏ô 10001, ‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢ ‡∏Ç‡∏¢‡∏±‡∏ô, ‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç" />
          </div>
        </div>
      </Card>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <Card>
        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶' : (
          <>
            <div className="att-wrap" style={{ marginTop: 8 }}>
              <table className="att-table">
                <thead>
                  <tr>
                    <Th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô</Th>
                    <Th>‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Th>
                    <Th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Th>
                    <Th>‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏≤</Th>
                    <Th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</Th>
                    <Th>‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</Th>
                    <Th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Th>
                    <Th className="__actions">‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</Th>
                  </tr>
                </thead>
                <tbody>
                  {visRows.length === 0 ? (
                    <tr><Td colSpan={8} style={{ color: '#6b7280' }}>‚Äî ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äî</Td></tr>
                  ) : visRows.map(r => (
                    <tr key={r.id}>
                      <Td>{thai(r.request_date)}</Td>
                      <Td>{r.student_code || r.student_id} ‚Ä¢ {r.student_name}</Td>
                      <Td>{r.type}</Td>
                      <Td>{thai(r.date_from)} ‚Üí {thai(r.date_to)}</Td>
                      <Td>{r.reason || '‚Äî'}</Td>
                      <Td>{r.files?.length ? `‡∏°‡∏µ (${r.files.length})` : '‚Äî'}</Td>
                      <Td>
                        {r.status === 'pending' ? <span style={{ background:'#fef3c7', color:'#92400e', padding:'2px 8px', borderRadius:999, fontSize:13 }}>‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>
                          : r.status === 'approved' ? <span style={{ background:'#dcfce7', color:'#166534', padding:'2px 8px', borderRadius:999, fontSize:13 }}>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>
                          : <span style={{ background:'#fee2e2', color:'#991b1b', padding:'2px 8px', borderRadius:999, fontSize:13 }}>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</span>}
                      </Td>
                      <Td className="__actions">
                        <div style={{ display: 'flex', gap: 8 }}>
                          <Button variant="secondary" onClick={() => { setView(r); setDecisionNote(''); }} title="‡∏î‡∏π/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥">
                            üîç <span className="btn-text">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
                          </Button>
                        </div>
                      </Td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <Pagination page={page} perPage={PER_PAGE} total={displayRows.length} onPage={setPage} />
          </>
        )}
      </Card>

      <DetailModal
        open={!!view}
        onClose={() => setView(null)}
        data={view}
        decisionNote={decisionNote}
        setDecisionNote={setDecisionNote}
        onApprove={doApprove}
        onReject={doReject}
      />
    </Page>
  );
}

/* ---------- UI minis ---------- */
function Th({ children, className, ...p }) {
  return <th {...p} className={className} style={{ textAlign:'left', padding:'8px 6px', borderBottom:'1px solid #e5e7eb', whiteSpace:'nowrap' }}>{children}</th>;
}
function Td({ children, ...p }) {
  return <td {...p} style={{ padding:'8px 6px', borderBottom:'1px solid #f3f4f6' }}>{children}</td>;
}

/* ---------- Modal (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á) ---------- */
function DetailModal({ open, onClose, data, decisionNote, setDecisionNote, onApprove, onReject }) {
  if (!open) return null;
  if (!data) return null;

  const guardianName = data.guardian_name || data.parent_name || '‚Äî';
  const guardianPhone = data.guardian_phone || data.parent_phone || '‚Äî';

  return (
    <CommonModal
      open={open}
      onClose={onClose}
      title={`‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á ${data.code || data.id || ''}`}
      actions={(
        <>
          <Button variant="secondary" onClick={onClose}>‡∏õ‡∏¥‡∏î</Button>
          <Button variant="secondary" onClick={onReject}>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</Button>
          <Button onClick={onApprove}>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</Button>
        </>
      )}
    >
      <div style={{ display:'grid', gap:10 }}>
        <div><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô:</b> {thai(data.request_date)}</div>
        <div><b>‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</b> {data.student_name} ({data.student_code || data.student_id})</div>
        <div><b>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</b> {data.type}</div>
        <div><b>‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏≤:</b> {thai(data.date_from)} ‚Üí {thai(data.date_to)}</div>
        <div><b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> {data.reason || '‚Äî'}</div>
        <div><b>‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö:</b> {data.files?.length ? `‡∏°‡∏µ (${data.files.length})` : '‚Äî'}</div>

        {/* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á */}
        <div style={{ marginTop:4 }}>
          <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á:</b>
          <div style={{ display:'grid', gap:6, marginTop:6 }}>
            <div><b>‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏™‡∏Å‡∏∏‡∏•:</b> {guardianName}</div>
            <div><b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> {guardianPhone}</div>
          </div>
        </div>

        <div style={{ marginTop:10 }}>
          <Label>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ (‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)</Label>
          <Input value={decisionNote} onChange={e => setDecisionNote(e.target.value)} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• (‡∏ñ‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò)" />
        </div>
      </div>
    </CommonModal>
  );
}